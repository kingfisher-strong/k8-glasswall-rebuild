# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Deploy to GKE - MOD

on:
  push:
    branches:
    - dev

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: native    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GCLOUD_AUTH }}
        project_id: ${{ secrets.PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        for entry in "./Linux/input"/*
        do
          echo "$entry"
          R=$(($RANDOM%329382938293))
          new1="${entry//./-}"
          newx="${new1//(/-}"
          newy="${newx//)/-}"
          newz="${newy// /-}"
          new2="${newz//_/-}"
          new3="${new2:14}"
          echo "this is new2"
          echo "$new2"
          gcloud --quiet auth configure-docker
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
          cp job.yaml job-"${new2:14}".yaml
          cat job-"${new2:14}".yaml
          cp Linux/Dockerfile Linux/Dockerfile-"${new2:14}"
          sed -i 's/tobereplaced/'"${entry:14}"'/g' Linux/Dockerfile-"${new2:14}"
          ls Linux/test/
          cat Linux/Dockerfile-"${new2:14}"
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:${new2:14}" \
            --build-arg GITHUB_SHA="${new2:14}" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            -f ./Linux/Dockerfile-"${new2:14}" ./Linux/
          docker push "gcr.io/$PROJECT_ID/$IMAGE:${new2:14}"
          sed -i 's/latest/'"${new2:14}"'/g' job-"${new2:14}".yaml
          sed -i 's/jobname/'"${new3,,}"'/g' job-"${new2:14}".yaml
          cat job-"${new2:14}".yaml
          kubectl get pods --all-namespaces
          kubectl apply -f job-"${new2:14}".yaml -n dev
        done
    # - run: |-
    #     gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    # - run: |-
    #     gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    # Build the Docker image
    # - name: Build
    #   run: |-
    #     docker build \
    #       --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       ./Linux
    # Push the Docker image to Google Container Registry
    # - name: Publish
    #   run: |-
    #     docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    # - name: Check kubectl
    #   run: |-
    #     kubectl get pods --all-namespaces
    # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |-
    #     ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
    #     ./kustomize build . | kubectl apply -f -
    #     kubectl rollout status deployment/$DEPLOYMENT_NAME
    #     kubectl get services -o wide
