#include <cstdint>
#include <vector>
#include <iostream>
#include <exception>
#include <string>
#include <climits>

#include "jni.h"                                // Required for JNI
#include "com_glasswallsolutions_Glasswall.h"   // The autogenerated file that Java interacts with
#include "utf8cpp.h"                            // utf-8 library used for encoding conversion
#include "dll.gwfile.h"                         // Our API header

using namespace std;

static jclass glasswallResultClass;
static jclass exceptionClass;
static jmethodID glasswallResultConstructor;
static jfieldID fileStatusID;
static jfieldID analysisReportID;
static jfieldID manageAndProtectBufferID;
static jfieldID manageAndProtectLiteBufferID;
static jfieldID exportBufferID;
static jfieldID importBufferID;
static jfieldID reportLogID;
static jfieldID xmlConfigID;
static jfieldID allIDInfoID;
static jfieldID idInfoID;
static jfieldID processStatusID;
static jfieldID determineFileTypeID;

/*
 * public final int fileStatus;
    descriptor: I

  public final java.lang.String analysisReport;
    descriptor: Ljava/lang/String;

  public final byte[] manageAndProtectBuffer;
    descriptor: [B

  public final byte[] manageAndProtectLiteBuffer;
    descriptor: [B

  public final byte[] exportBuffer;
    descriptor: [B

  public final byte[] importBuffer;
    descriptor: [B

  public final java.lang.String reportLog;
    descriptor: Ljava/lang/String;

  public final java.lang.String xmlConfig;
    descriptor: Ljava/lang/String;

  public final java.lang.String allIDInfo;
    descriptor: Ljava/lang/String;

  public final java.lang.String idInfo;
    descriptor: Ljava/lang/String;

  public final int processStatus;
    descriptor: I

  public final int determineFileType;
    descriptor: I

  public com.glasswallsolutions.GlasswallResult();
    descriptor: ()V
*/

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *)
{
    JNIEnv *env;

    if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK)
    {
        return JNI_ERR;
    }

    jclass glasswallResultClassLocal = env->FindClass("Lcom/glasswallsolutions/GlasswallResult;");

    if (glasswallResultClassLocal == nullptr)
    {
        return JNI_ERR;
    }

    glasswallResultClass = reinterpret_cast<jclass>(env->NewGlobalRef(glasswallResultClassLocal));
    env->DeleteLocalRef(glasswallResultClassLocal);

    jclass exceptionClassLocal = env->FindClass("Ljava/lang/Exception;");

    if (exceptionClassLocal == nullptr)
    {
        return JNI_ERR;
    }

    exceptionClass = reinterpret_cast<jclass>(env->NewGlobalRef(exceptionClassLocal));
    env->DeleteLocalRef(exceptionClassLocal);

    glasswallResultConstructor = env->GetMethodID(glasswallResultClass, "<init>", "()V");

    if (glasswallResultConstructor == nullptr)
    {
        return JNI_ERR;
    }

    fileStatusID = env->GetFieldID(glasswallResultClass, "fileStatus", "I");

    if (fileStatusID == nullptr)
    {
        return JNI_ERR;
    }

    analysisReportID = env->GetFieldID(glasswallResultClass, "analysisReport", "Ljava/lang/String;");

    if (analysisReportID == nullptr)
    {
        return JNI_ERR;
    }

    manageAndProtectBufferID = env->GetFieldID(glasswallResultClass, "manageAndProtectBuffer", "[B");

    if (manageAndProtectBufferID == nullptr)
    {
        return JNI_ERR;
    }

    manageAndProtectLiteBufferID = env->GetFieldID(glasswallResultClass, "manageAndProtectLiteBuffer", "[B");

    if (manageAndProtectLiteBufferID == nullptr)
    {
        return JNI_ERR;
    }

    exportBufferID = env->GetFieldID(glasswallResultClass, "exportBuffer", "[B");

    if (exportBufferID == nullptr)
    {
        return JNI_ERR;
    }

    importBufferID = env->GetFieldID(glasswallResultClass, "importBuffer", "[B");

    if (importBufferID == nullptr)
    {
        return JNI_ERR;
    }

    reportLogID = env->GetFieldID(glasswallResultClass, "reportLog", "Ljava/lang/String;");

    if (reportLogID == nullptr)
    {
        return JNI_ERR;
    }

    xmlConfigID = env->GetFieldID(glasswallResultClass, "xmlConfig", "Ljava/lang/String;");

    if (xmlConfigID == nullptr)
    {
        return JNI_ERR;
    }

    allIDInfoID = env->GetFieldID(glasswallResultClass, "allIDInfo", "Ljava/lang/String;");

    if (allIDInfoID == nullptr)
    {
        return JNI_ERR;
    }

    idInfoID = env->GetFieldID(glasswallResultClass, "idInfo", "Ljava/lang/String;");

    if (idInfoID == nullptr)
    {
        return JNI_ERR;
    }

    processStatusID = env->GetFieldID(glasswallResultClass, "processStatus", "I");

    if (processStatusID == nullptr)
    {
        return JNI_ERR;
    }

    determineFileTypeID = env->GetFieldID(glasswallResultClass, "determineFileType", "I");

    if (determineFileTypeID == nullptr)
    {
        return JNI_ERR;
    }

    return JNI_VERSION_1_6;
}

JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *)
{
    JNIEnv *env;

    vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6);
    env->DeleteGlobalRef(glasswallResultClass);
    env->DeleteGlobalRef(exceptionClass);
}

void throwJavaException (JNIEnv *env, exception ex)
{
    env->ThrowNew(exceptionClass, ex.what());
}

void throwJavaException(JNIEnv *env, string message)
{
    env->ThrowNew(exceptionClass, message.c_str());
}

void checkBufferSize(size_t dataSize)
{
    if (dataSize > INT_MAX)
    {
        throw runtime_error("Buffer size exceeds max array size");
    }
}

jstring wchartToJstring(JNIEnv *env, wchar_t *input)
{
    if (input == nullptr)
    {
        return nullptr;
    }

    size_t characterCount = 0;

    for (wchar_t *tempPtr = input; tempPtr != nullptr && (*tempPtr) != 0; ++characterCount, ++tempPtr);

    vector<char> outputBuffer;

#ifdef __GNUC__
    utf8::utf32to8(input, input + characterCount, back_inserter(outputBuffer));
#else
    utf8::utf16to8(input, input + characterCount, back_inserter(outputBuffer));
#endif

    outputBuffer.push_back(0); // Add null terminator

    return env->NewStringUTF(outputBuffer.data());
}

vector<wchar_t> jstringToWchart(JNIEnv *env, jstring input)
{
    vector<wchar_t> result;

    if (input != nullptr)
    {
        const char *javaString = env->GetStringUTFChars(input, nullptr);
        jsize javaStringSize = env->GetStringUTFLength(input);
#ifdef __GNUC__
        utf8::utf8to32(javaString, javaString + javaStringSize, back_inserter(result));
#else
        utf8::utf8to16(javaString, javaString + javaStringSize, back_inserter(result));
#endif
        env->ReleaseStringUTFChars(input, javaString);
    }

    result.push_back(0);

    return result;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileConfigXML
 * Signature: (Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileConfigXML
  (JNIEnv *env, jclass, jstring xmlConfig)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> xmlConfigBuffer = jstringToWchart(env, xmlConfig);
        int status = GWFileConfigXML(xmlConfigBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileConfigGet
 * Signature: ()Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileConfigGet
  (JNIEnv *env, jclass)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        size_t configFileBufferSize = 0;
        wchar_t *configFileBuffer = nullptr;
        int status = GWFileConfigGet(&configFileBuffer, &configFileBufferSize);

        jstring xmlConfig = wchartToJstring(env, configFileBuffer);

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, xmlConfigID, xmlConfig);

        env->DeleteLocalRef(xmlConfig);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileConfigRevertToDefaults
 * Signature: ()Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileConfigRevertToDefaults
  (JNIEnv *env, jclass)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        int status = GWFileConfigRevertToDefaults();
        env->SetIntField(glasswallResult, fileStatusID, status);
    } catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileProcessStatus
 * Signature: (I)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileProcessStatus
  (JNIEnv *env, jclass)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        unsigned int processStatus = 0;
        int status = GWFileProcessStatus(&processStatus);

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetIntField(glasswallResult, processStatusID, static_cast<int>(processStatus));
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWGetIdInfo
 * Signature: (I)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWGetIdInfo
  (JNIEnv *env, jclass, jint issueId)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        void *outputBuffer = nullptr;
        size_t bufferLength = 0;
        int status = GWGetIdInfo(static_cast<uint32_t>(issueId), &bufferLength, &outputBuffer);

        char *outputBufferPtr = reinterpret_cast<char*>(outputBuffer);

        vector<char> idBuffer(outputBufferPtr, outputBufferPtr + bufferLength);
        idBuffer.push_back(0);

        jstring idInfoString = env->NewStringUTF(idBuffer.data());
        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, idInfoID, idInfoString);

        env->DeleteLocalRef(idInfoString);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWGetAllIdInfo
 * Signature: ()Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWGetAllIdInfo
  (JNIEnv *env, jclass)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        void *outputBuffer = nullptr;
        size_t bufferLength = 0;
        int status = GWGetAllIdInfo(&bufferLength, &outputBuffer);

        char *outputBufferPtr = reinterpret_cast<char*>(outputBuffer);

        vector<char> allIDBuffer (outputBufferPtr, outputBufferPtr + bufferLength);
        allIDBuffer.push_back(0);

        jstring allIDInfoString = env->NewStringUTF(allIDBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, allIDInfoID, allIDInfoString);

        env->DeleteLocalRef(allIDInfoString);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWDetermineFileTypeFromFile
 * Signature: (Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWDetermineFileTypeFromFile
  (JNIEnv *env, jclass, jstring inputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        int determineFileType = GWDetermineFileTypeFromFile(inputFilePathBuffer.data());

        env->SetIntField(glasswallResult, determineFileTypeID, determineFileType);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWDetermineFileTypeFromFileAndReport
 * Signature: (Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWDetermineFileTypeFromFileAndReport
 (JNIEnv *env, jclass, jstring inputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        void *outputBufferPtr   = nullptr;
        size_t outputBufferSize = 0;

        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        int determineFileType = GWDetermineFileTypeFromFileAndReport(inputFilePathBuffer.data(), &outputBufferPtr, &outputBufferSize);

        char *outputBufferCharPtr = reinterpret_cast<char *>(outputBufferPtr);

        vector<char> analysisBuffer(outputBufferCharPtr, outputBufferCharPtr + outputBufferSize);
        analysisBuffer.push_back(0);

        jstring analysisXml = env->NewStringUTF(analysisBuffer.data());

        env->SetIntField(glasswallResult, determineFileTypeID, determineFileType);
        env->SetObjectField(glasswallResult, analysisReportID, analysisXml);

        env->DeleteLocalRef(analysisXml);
    }
    catch (exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWDetermineFileTypeFromFileInMem
 * Signature: ([B)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWDetermineFileTypeFromFileInMem
 (JNIEnv *env, jclass, jbyteArray inputBuffer)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    if (inputBuffer == nullptr)
    {
        return nullptr;
    }

    try
    {
        size_t inputBufferSize = static_cast<size_t>(env->GetArrayLength(inputBuffer));
        void *inputBufferPtr   = env->GetByteArrayElements(inputBuffer, nullptr);

        int determineFileType  = GWDetermineFileTypeFromFileInMem(inputBufferPtr, inputBufferSize);

        env->ReleaseByteArrayElements(inputBuffer, reinterpret_cast<jbyte*>(inputBufferPtr), JNI_ABORT);
        env->SetIntField(glasswallResult, determineFileTypeID, determineFileType);
    }
    catch (exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWDetermineFileTypeFromFileInMemAndReport
 * Signature: ([B)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWDetermineFileTypeFromFileInMemAndReport
 (JNIEnv *env, jclass, jbyteArray inputBuffer)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    if (inputBuffer == nullptr)
    {
        return nullptr;
    }

    try
    {
        void *outputBufferPtr   = nullptr;
        size_t outputBufferSize = 0;

        size_t inputBufferSize  = static_cast<size_t>(env->GetArrayLength(inputBuffer));
        void *inputBufferPtr    = env->GetByteArrayElements(inputBuffer, nullptr);

        int determineFileType = GWDetermineFileTypeFromFileInMemAndReport(inputBufferPtr, inputBufferSize, &outputBufferPtr, &outputBufferSize);

        env->ReleaseByteArrayElements(inputBuffer, reinterpret_cast<jbyte*>(inputBufferPtr), JNI_ABORT);

        char *outputBufferCharPtr = reinterpret_cast<char *>(outputBufferPtr);

        vector<char> analysisBuffer(outputBufferCharPtr, outputBufferCharPtr + outputBufferSize);
        analysisBuffer.push_back(0);

        jstring analysisXml = env->NewStringUTF(analysisBuffer.data());

        env->SetIntField(glasswallResult, determineFileTypeID, determineFileType);
        env->SetObjectField(glasswallResult, analysisReportID, analysisXml);

        env->DeleteLocalRef(analysisXml);
    }
    catch (exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileDone
 * Signature: ()Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileDone
  (JNIEnv *env, jclass)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        int status = GWFileDone();
        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileVersion
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_glasswallsolutions_Glasswall_GWFileVersion
  (JNIEnv *env, jclass)
{
    try
    {
        wchar_t *fileVersion = GWFileVersion();
        return wchartToJstring(env, fileVersion);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
        return nullptr;
    }
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileProcessMsg
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_glasswallsolutions_Glasswall_GWFileProcessMsg
  (JNIEnv *env, jclass)
{
    try
    {
        wchar_t *fileProcessMessage = GWFileProcessMsg();
        return wchartToJstring(env, fileProcessMessage);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
        return nullptr;
    }
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileErrorMsg
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_glasswallsolutions_Glasswall_GWFileErrorMsg
  (JNIEnv *env, jclass)
{
    try
    {
        wchar_t *errorMessage = GWFileErrorMsg();
        return wchartToJstring(env, errorMessage);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
        return nullptr;
    }
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileProtectLite
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileProtectLite
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        void *outputBufferPtr = nullptr;
        size_t outputBufferSize = 0;

        int status = GWFileProtectLite(inputFilePathBuffer.data(), wcTypeBuffer.data(), &outputBufferPtr, &outputBufferSize);

        jbyteArray outputBuffer = env->NewByteArray(static_cast<jsize>(outputBufferSize));

        env->SetByteArrayRegion(outputBuffer, 0, static_cast<jsize>(outputBufferSize), reinterpret_cast<jbyte*>(outputBufferPtr));
        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, manageAndProtectLiteBufferID, outputBuffer);

        env->DeleteLocalRef(outputBuffer);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileProtect
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileProtect
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        void *outputBufferPtr = nullptr;
        size_t outputBufferSize = 0;

        int status = GWFileProtect(inputFilePathBuffer.data(), wcTypeBuffer.data(), &outputBufferPtr, &outputBufferSize);

        if (status == 1)
        {
            checkBufferSize(outputBufferSize);
            int bufferSize = static_cast<jint>(outputBufferSize);

            jbyteArray outputBuffer = env->NewByteArray(bufferSize);

            env->SetByteArrayRegion(outputBuffer, 0, bufferSize, reinterpret_cast<jbyte*>(outputBufferPtr));
            env->SetIntField(glasswallResult, fileStatusID, status);
            env->SetObjectField(glasswallResult, manageAndProtectBufferID, outputBuffer);

            env->DeleteLocalRef(outputBuffer);
        }
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileAnalysisAudit
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileAnalysisAudit
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        void *outputBufferPtr = nullptr;
        size_t outputBufferSize = 0;

        int status = GWFileAnalysisAudit(inputFilePathBuffer.data(), wcTypeBuffer.data(), &outputBufferPtr, &outputBufferSize);

        char *outputBufferCharPtr = reinterpret_cast<char *>(outputBufferPtr);

        vector<char> analysisBuffer(outputBufferCharPtr, outputBufferCharPtr + outputBufferSize);
        analysisBuffer.push_back(0);

        jstring analysisXml = env->NewStringUTF(analysisBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, analysisReportID, analysisXml);

        env->DeleteLocalRef(analysisXml);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileProtectLite
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileProtectLite
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType, jstring outputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);
        vector<wchar_t> outputFilePathBuffer = jstringToWchart(env, outputFilePath);

        int status = GWFileToFileProtectLite(inputFilePathBuffer.data(), wcTypeBuffer.data(), outputFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileProtect
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileProtect
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType, jstring outputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);
        vector<wchar_t> outputFilePathBuffer = jstringToWchart(env, outputFilePath);

        int status = GWFileToFileProtect(inputFilePathBuffer.data(), wcTypeBuffer.data(), outputFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileAnalysisAudit
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileAnalysisAudit
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType, jstring analysisOutputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);
        vector<wchar_t> analysisOutputFilePathBuffer = jstringToWchart(env, analysisOutputFilePath);

        int status = GWFileToFileAnalysisAudit(inputFilePathBuffer.data(), wcTypeBuffer.data(), analysisOutputFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWMemoryToMemoryProtect(JNIEnv *env, jclass, jbyteArray inputBuffer, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    if (inputBuffer == nullptr)
    {
        return nullptr;
    }

    try
    {
        void *outputBufferPtr        = nullptr;
        size_t outputBufferLength    = 0;
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        size_t inputBufferSize       = static_cast<size_t>(env->GetArrayLength(inputBuffer));
        void *inputBufferPtr         = env->GetByteArrayElements(inputBuffer, nullptr);

        int status = GWMemoryToMemoryProtect(inputBufferPtr, inputBufferSize, wcTypeBuffer.data(), &outputBufferPtr, &outputBufferLength);

        env->ReleaseByteArrayElements(inputBuffer, reinterpret_cast<jbyte*>(inputBufferPtr), JNI_ABORT);

        checkBufferSize(outputBufferLength);

        int bufferSize          = static_cast<jint>(outputBufferLength);
        jbyteArray outputBuffer = env->NewByteArray(bufferSize);

        env->SetByteArrayRegion(outputBuffer, 0, bufferSize, reinterpret_cast<jbyte*>(outputBufferPtr));
        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, manageAndProtectBufferID, outputBuffer);

        env->DeleteLocalRef(outputBuffer);
    }
    catch (exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWMemoryToMemoryAnalysisAudit(JNIEnv *env, jclass, jbyteArray inputBuffer, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    if (inputBuffer == nullptr)
    {
        return nullptr;
    }

    try
    {
        void *outputBufferPtr        = nullptr;
        size_t outputBufferLength    = 0;
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        size_t inputBufferSize       = static_cast<size_t>(env->GetArrayLength(inputBuffer));
        void *inputBufferPtr         = env->GetByteArrayElements(inputBuffer, nullptr);

        int status = GWMemoryToMemoryAnalysisAudit(inputBufferPtr, inputBufferSize, wcTypeBuffer.data(), &outputBufferPtr, &outputBufferLength);

        env->ReleaseByteArrayElements(inputBuffer, reinterpret_cast<jbyte*>(inputBufferPtr), JNI_ABORT);

        checkBufferSize(outputBufferLength);

        char *outputBufferCharPtr = reinterpret_cast<char *>(outputBufferPtr);
        vector<char> analysisBuffer(outputBufferCharPtr, outputBufferCharPtr + outputBufferLength);
        analysisBuffer.push_back(0);

        jstring analysisXml = env->NewStringUTF(analysisBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, analysisReportID, analysisXml);

        env->DeleteLocalRef(analysisXml);
    }
    catch (exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToMemoryProtectAndImport
 * Signature: (Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToMemoryProtectAndImport
  (JNIEnv *env, jclass, jstring inputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);

        void *outputBufferPtr = nullptr;
        size_t outputBufferSize = 0;

        int status = GWFileToMemoryProtectAndImport(inputFilePathBuffer.data(), &outputBufferPtr, &outputBufferSize);

        checkBufferSize(outputBufferSize);
        int bufferSize = static_cast<jint>(outputBufferSize);

        jbyteArray outputBuffer = env->NewByteArray(bufferSize);

        env->SetByteArrayRegion(outputBuffer, 0, bufferSize, reinterpret_cast<jbyte*>(outputBufferPtr));
        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, importBufferID, outputBuffer);

        env->DeleteLocalRef(outputBuffer);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToMemoryAnalysisProtectAndExport
 * Signature: (Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToMemoryAnalysisProtectAndExport
  (JNIEnv *env, jclass, jstring inputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);

        void *outputBufferPtr = nullptr;
        size_t outputBufferSize = 0;

        int status = GWFileToMemoryAnalysisProtectAndExport(inputFilePathBuffer.data(), &outputBufferPtr, &outputBufferSize);

        checkBufferSize(outputBufferSize);
        int bufferSize = static_cast<jint>(outputBufferSize);

        jbyteArray outputBuffer = env->NewByteArray(bufferSize);

        env->SetByteArrayRegion(outputBuffer, 0, bufferSize, reinterpret_cast<jbyte*>(outputBufferPtr));
        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, exportBufferID, outputBuffer);

        env->DeleteLocalRef(outputBuffer);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileProtectAndImport
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileProtectAndImport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring outputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> outputFilePathBuffer = jstringToWchart(env, outputFilePath);

        int status = GWFileToFileProtectAndImport(inputFilePathBuffer.data(), outputFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileAnalysisProtectAndExport
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileAnalysisProtectAndExport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring outputFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> outputFilePathBuffer = jstringToWchart(env, outputFilePath);

        int status = GWFileToFileAnalysisProtectAndExport(inputFilePathBuffer.data(), outputFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileProtectLiteAndReport
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileProtectLiteAndReport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        void *outputBufferPtr = nullptr;
        size_t outputBufferSize = 0;
        void *reportBufferPtr = nullptr;
        size_t reportBufferSize = 0;

        int status = GWFileProtectLiteAndReport(inputFilePathBuffer.data(), wcTypeBuffer.data(), &outputBufferPtr, &outputBufferSize, &reportBufferPtr, &reportBufferSize);

        char *reportBufferCharPtr = reinterpret_cast<char *>(reportBufferPtr);

        vector<char> reportBuffer(reportBufferCharPtr, reportBufferCharPtr + reportBufferSize);
        reportBuffer.push_back(0);

        checkBufferSize(outputBufferSize);
        int bufferSize = static_cast<jint>(outputBufferSize);

        jbyteArray outputBuffer = env->NewByteArray(bufferSize);
        jstring reportLog = env->NewStringUTF(reportBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetByteArrayRegion(outputBuffer, 0, bufferSize, reinterpret_cast<jbyte*>(outputBufferPtr));
        env->SetObjectField(glasswallResult, manageAndProtectLiteBufferID, outputBuffer);
        env->SetObjectField(glasswallResult, reportLogID, reportLog);

        env->DeleteLocalRef(outputBuffer);
        env->DeleteLocalRef(reportLog);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileProtectAndReport
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileProtectAndReport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        void *outputBufferPtr = nullptr;
        size_t outputBufferSize = 0;
        void *reportBufferPtr = nullptr;
        size_t reportBufferSize = 0;

        int status = GWFileProtectAndReport(inputFilePathBuffer.data(), wcTypeBuffer.data(), &outputBufferPtr, &outputBufferSize, &reportBufferPtr, &reportBufferSize);

        char *reportBufferCharPtr = reinterpret_cast<char *>(reportBufferPtr);

        vector<char> reportBuffer(reportBufferCharPtr, reportBufferCharPtr + reportBufferSize);
        reportBuffer.push_back(0);

        checkBufferSize(outputBufferSize);
        int bufferSize = static_cast<jint>(outputBufferSize);

        jbyteArray outputBuffer = env->NewByteArray(bufferSize);
        jstring reportLog = env->NewStringUTF(reportBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetByteArrayRegion(outputBuffer, 0, bufferSize, reinterpret_cast<jbyte*>(outputBufferPtr));
        env->SetObjectField(glasswallResult, manageAndProtectBufferID, outputBuffer);
        env->SetObjectField(glasswallResult, reportLogID, reportLog);

        env->DeleteLocalRef(outputBuffer);
        env->DeleteLocalRef(reportLog);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileAnalysisAuditAndReport
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileAnalysisAuditAndReport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);

        void *analysisBufferPtr = nullptr;
        size_t analysisBufferSize = 0;
        void *reportBufferPtr = nullptr;
        size_t reportBufferSize = 0;

        int status = GWFileAnalysisAuditAndReport(inputFilePathBuffer.data(), wcTypeBuffer.data(), &analysisBufferPtr, &analysisBufferSize, &reportBufferPtr, &reportBufferSize);

        char *analysisBufferCharPtr = reinterpret_cast<char *>(analysisBufferPtr);

        vector<char> analysisBuffer(analysisBufferCharPtr, analysisBufferCharPtr + analysisBufferSize);
        analysisBuffer.push_back(0);

        char *reportBufferCharPtr = reinterpret_cast<char *>(reportBufferPtr);

        vector<char> reportBuffer (reportBufferCharPtr, reportBufferCharPtr + reportBufferSize);
        reportBuffer.push_back(0);

        jstring analysisXml = env->NewStringUTF(analysisBuffer.data());
        jstring reportLog = env->NewStringUTF(reportBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
        env->SetObjectField(glasswallResult, analysisReportID, analysisXml);
        env->SetObjectField(glasswallResult, reportLogID, reportLog);

        env->DeleteLocalRef(analysisXml);
        env->DeleteLocalRef(reportLog);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileProtectLiteAndReport
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileProtectLiteAndReport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType, jstring outputFilePath, jstring reportFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);
        vector<wchar_t> outputFilePathBuffer = jstringToWchart(env, outputFilePath);
        vector<wchar_t> reportFilePathBuffer = jstringToWchart(env, reportFilePath);

        int status = GWFileToFileProtectLiteAndReport(inputFilePathBuffer.data(), wcTypeBuffer.data(), outputFilePathBuffer.data(), reportFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileProtectAndReport
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileProtectAndReport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType, jstring outputFilePath, jstring reportFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);
        vector<wchar_t> outputFilePathBuffer = jstringToWchart(env, outputFilePath);
        vector<wchar_t> reportFilePathBuffer = jstringToWchart(env, reportFilePath);

        int status = GWFileToFileProtectAndReport(inputFilePathBuffer.data(), wcTypeBuffer.data(), outputFilePathBuffer.data(), reportFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}

/*
 * Class:     com_glasswallsolutions_Glasswall
 * Method:    GWFileToFileAnalysisAuditAndReport
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/glasswallsolutions/GlasswallResult;
 */
JNIEXPORT jobject JNICALL Java_com_glasswallsolutions_Glasswall_GWFileToFileAnalysisAuditAndReport
  (JNIEnv *env, jclass, jstring inputFilePath, jstring wcType, jstring analysisOutputFilePath, jstring reportFilePath)
{
    jobject glasswallResult = env->NewObject(glasswallResultClass, glasswallResultConstructor);

    if (glasswallResult == nullptr)
    {
        return nullptr;
    }

    try
    {
        vector<wchar_t> inputFilePathBuffer = jstringToWchart(env, inputFilePath);
        vector<wchar_t> wcTypeBuffer = jstringToWchart(env, wcType);
        vector<wchar_t> analysisOutputFilePathBuffer = jstringToWchart(env, analysisOutputFilePath);
        vector<wchar_t> reportFilePathBuffer = jstringToWchart(env, reportFilePath);

        int status = GWFileToFileAnalysisAuditAndReport(inputFilePathBuffer.data(), wcTypeBuffer.data(), analysisOutputFilePathBuffer.data(), reportFilePathBuffer.data());

        env->SetIntField(glasswallResult, fileStatusID, status);
    }
    catch(exception &ex)
    {
        throwJavaException(env, ex);
    }

    return glasswallResult;
}
